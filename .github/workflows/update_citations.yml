name: Update Dataset Citations Manually

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  update_citations_job:
    runs-on: ubuntu-latest
    name: Discover Datasets & Update Citations

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10' # Specify Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure Git User Identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          echo "Git user identity configured successfully"

      - name: Create or switch to update branch
        id: create_branch
        run: |
          # Generate branch name with current year and month
          BRANCH_NAME="update-citations-$(date +'%Y-%m')"
          echo "Using branch name: $BRANCH_NAME"
          
          # Check if branch exists locally
          if git show-ref --quiet refs/heads/$BRANCH_NAME; then
            echo "Branch $BRANCH_NAME already exists locally, checking out"
            git checkout $BRANCH_NAME
          else
            # Check if branch exists on remote
            if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
              echo "Branch $BRANCH_NAME exists on remote, checking out"
              git fetch origin $BRANCH_NAME
              git checkout $BRANCH_NAME
            else
              echo "Creating new branch $BRANCH_NAME"
              git checkout -b $BRANCH_NAME
            fi
          fi
          
          # Make branch name available to subsequent steps
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Discover relevant datasets
        id: discover
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Or a specific PAT if needed for cross-repo access not covered by GITHUB_TOKEN
        run: |
          python discover_datasets.py --output-file discovered_datasets.txt
          echo "dataset_list_file=discovered_datasets.txt" >> $GITHUB_OUTPUT

      - name: Update citation information
        env:
          SCRAPERAPI_KEY: ${{ secrets.SCRAPERAPI_KEY }}
        run: |
          python update_citations.py \
            --dataset-list-file ${{ steps.discover.outputs.dataset_list_file }} \
            --previous-citations-file citations/previous_citations.csv \
            --output-dir citations_output/
          # Add steps here to commit and push changes, or create a PR
          # This will be handled in a later task (Task 4 & 5)

      - name: Update previous_citations.csv for next run
        run: |
          echo "Looking for today's citation file to update previous_citations.csv..."
          TODAY_DATE=$(date +%d%m%Y)
          LATEST_CITATIONS_FILE="citations_output/citations_${TODAY_DATE}.csv"
          TARGET_PREVIOUS_FILE="citations/previous_citations.csv"

          if [ -f "$LATEST_CITATIONS_FILE" ]; then
            echo "Found $LATEST_CITATIONS_FILE. Copying to $TARGET_PREVIOUS_FILE..."
            # Ensure the target directory exists, though it should from checkout
            mkdir -p citations/
            cp "$LATEST_CITATIONS_FILE" "$TARGET_PREVIOUS_FILE"
            echo "Successfully updated $TARGET_PREVIOUS_FILE"
          else
            echo "Error: Today's citation file ($LATEST_CITATIONS_FILE) not found."
            echo "Skipping update of $TARGET_PREVIOUS_FILE. It might need to be created manually or the script might not have run as expected."
            # Consider whether this should be a failing condition
            # exit 1 
          fi 